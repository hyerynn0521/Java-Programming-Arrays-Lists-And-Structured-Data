import edu.duke.*;
/**
 * Write a description of TestCaesarCipherTwo here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class TestCaesarCipherTwo {
    
    public int[] countLetters(String encrypted){
        String alphabet = "abcdefghijklmnopqrstuvwxyz";
        int[] counts = new int[26];
        for (int i=0; i<encrypted.length();i++){
            char currChar = Character.toLowerCase(encrypted.charAt(i));
            
            int alphabetIndex = alphabet.indexOf(currChar);
            if (alphabetIndex != -1){
                counts[alphabetIndex]++;
            }
            
        }
        return counts;
    }
    public int indexOfMax(int[] values) {

        int max = 0;
        int position = 0;
            for (int i = 0; i <values.length;i++) 
              {
                  if (values[i] > max) 
                    {
                        max = values[i];
                        position = i;
                    } 
        }
        
        return position; 
        
    }  
    public String halfOfString(String message, int start){
        StringBuilder sb = new StringBuilder();
        for (int i=0; i<message.length();i++){
            char currchar = message.charAt(i);
            int index = message.indexOf(currchar);
            if(i == start){
                sb.append(message.charAt(i));
            }
            else if ((start-i)%2 == 0){
                sb.append(message.charAt(i));
            }
        }
        return sb.toString();
    }
    public void simpleTests(){
        FileResource fr = new FileResource();
        String frString = fr.asString();
        CaesarCipherTwo CCtwo = new CaesarCipherTwo(17, 3);
        String encrypted = CCtwo.encrypt(frString);
        System.out.println("encrypted: "+encrypted);
        String decrypted = breakCaesarCipher(frString);
        System.out.println("decrypted: "+decrypted);
    }
    public String breakCaesarCipher(String input){
        
        int[] freqs1 = countLetters(halfOfString(input, 0));
        int[] freqs2 = countLetters(halfOfString(input, 1));
        int maxDex1 = indexOfMax(freqs1);
        int maxDex2 = indexOfMax(freqs2);
        int dkey1 = maxDex1 -4;
        int dkey2 = maxDex2 -4;
        if(maxDex1<4){
            dkey1 = 26-(4-maxDex1);
        }
        else if(maxDex2 <4){
            dkey2 = 26-(4-maxDex2);
        }
        System.out.println("first key: "+dkey1);
        System.out.println("second key: "+dkey2);
        CaesarCipherTwo CCtwo = new CaesarCipherTwo(dkey1, dkey2);
        return CCtwo.decrypt(input);
    }
}
